        ####################################################
        print("객체탐지 영역 별도 처리 Start ------------->>>")
        ####################################################
        for det in pred:
            print(f"det len >>>>>>>>>> [{len(det)}]")
            if len(det):
                print(f"im.shape = {im0s[0].shape}")
                # 모델이 예측한 바운딩 박스 좌표를, 입력 이미지의 크기에 맞춰 다시 스케일링하는 역할을 함
                det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0s[0].shape).round()
                
                # 객체 탐지 결과 정보 추출
                for *xyxy, conf, cls in reversed(det):
                    label = names[int(cls)]
                    
                    # 특정 클래스 이름 설정
                    # 'person' 대신 'bus' 등 다른 클래스 이름을 사용할 수 있습니다.
                    if (label == 'person') & (conf >= 0.5) :                          
                        print(f"* [label={label} 및 정밀도>={conf:.2f}] 객체 별도 저장.......")
                        
                        # 이미지 크롭
                        # - im0s : 원본 이미지
                        #   -> int(xyxy[1]):int(xyxy[3]) : 바운딩 박스의 y축 범위를 지정
                        #     --> int(xyxy[1])은 상단 좌표, int(xyxy[3])은 하단 좌표
                        #   -> int(xyxy[0]):int(xyxy[2]) : 바운딩 박스의 x축 범위를 지정
                        #     --> int(xyxy[0])은 왼쪽 좌표, int(xyxy[2])는 오른쪽 좌표
                        cropped_img = im0s[0][int(xyxy[1]):int(xyxy[3]), int(xyxy[0]):int(xyxy[2])]

                        # 저장 경로 설정
                        # - ./runs/detect/exp11/라벨명_xx.jpg
                        save_path = f".\{save_dir}\{label}_{conf:.2f}.jpg"
                        print(f"* 저장 위치 : {save_path}")
                        
                        # 이미지 저장
                        cv2.imwrite(save_path, cropped_img)

                        ####################################################
                        print("<<<-------------객체탐지 영역 별도 처리 End")
                        ####################################################