<Yolo(You Only Look Once) - v5>
 - 객체 탐지 모델로 "욜로"라고 칭합니다.
 
 - 한 개의 계층을 이용하여 객체(사물)탐지(Object Detection)를  
   원하는 물체의 영역(Bounding Box), 이름(label), 정확도(score)를 표시하기 위한 
   "객체탐지(Object Detection)" 기술임
	 
 - 바운딩 박스(Bounding Box)란 사각형의 시작 좌표(x1, y1), 종료 좌료(x2, y2)로 표현되는
   타겟 위치를 사각형으로 표현한 것을 의미함

<객체 탐지 대상(매체)>
 - 이미지 내에서 객체 탐지 가능
 - 카메라를 통해 전송되는 영상 내에서 객체 탐지 가능
 - 동영상과 같은 매체 내 객체 탐지 가능
 
<YOLO 원리>
 - 이미지를 입력으로 받음 (카메라에서 들어오는 영상도 이미지일 뿐입니다.)
 - 이미지파일, 영상파일 등 numpy의 array 배열로 변환이 된다면 어떤 데이터든 처리 가능
 - 이미지 내에서 객체로 예측되는 위치를 바운딩 박스로 표시하게 됨

<YOLO 버전>
 - yolov3 ~ yolovn : 계속해서 새로운 버전이 나와 있음
 - yolov3 ~ yolov5까지는 yolo의 전통성에 따라서 업그레이드가 되어 왔으며,
   이후 버전 부터는 전통성에서 벗어난 버전으로 개인들에 의해서 업그레이드가 
   되고 있음

<yolov5 환경설정방법>
 1. yolov5 프레임워크 다운로드
  - 다운로드 URL : https://github.com/ultralytics/yolov5
  - 다운로드 위치 : 접속 후 상단 오른쪽 초록색 [Code] 버튼 클릭 
                                             > [Download ZIP] 클릭 다운
                                             > 압축 풀기

########## [ 환경설정 ] ##########
1. Yolo v5 파일 다운로드

2. 가상환경 생성하기

3. 객체탐지 실행
  - 프롬프트에서 아래 명령으로 실행합니다.
  - 실행 위치 : yolov5_master 디렉토리 위치에서 실행합니다.
  - 객체탐지 실행 파일명 : yolov5_master/detect.py

  <이미지 파일을 이용한 객체 탐지 실행 명령>
   - detect.py : 객체탐지를 위한 실행 파일
   - --weights : 모델 가중치 파일명을 오른쪽에 지정
               : 최초 yolov5_master 폴더 내에는 없으며,
                 실행을 하면 최초 1회 yolov5 사이트에서 자동 다운로드 받습니다.
               : 가중치 값을 가지고 있는 모델 입니다.
               : 이 가중치 모델로 객체 탐지를 수행하게 됩니다.
   - --img : 입력 이미지의 크기를 통일 시킵니다. 640 * 640 사이즈로 통일
           : 보통 사용되는 사이즈 -> 320, 640, 416
   - --conf : 객체 탐지의 신뢰도 임계값(정확도)을 설정
            : 객체 인식률이 50% 이상 정확도를 가지는 경우에만 탐지
   - --source : 객체 탐지에 사용할 이미지 파일 위치

   >python ./detect.py --weights ./models/yolov5s.pt --img 640 --conf 0.5 --source ./data/images/bus.jpg
   

4. 객체 탐지 결과 확인 폴더 
  - 객체 탐지 실행 이후 마지막에 탐지 결과를 저장한 위치가 나옵니다.
    --> Results saved to runs\detect\exp
    --> exp폴더는 객체탐지 실행할 때마다 exp2,exp3...생성됩니다.


<카메라를 이용한 객체 탐지 실행 명령>
 - 이미지를 이용하는 경우에는 source 뒤에 이미지 위치를 지정하지만,
 - 카메라를 이용하는 경우에는 source 뒤에 숫자 0만 정의합니다.
 - 카메라가 여러개인 경우에는 사용할 카메라 번호를 source 뒤에 숫자로 넣으면 됩니다.
   (카메라가 2개인 경우, 두번째 카메라를 사용하는 경우, 숫자 1을 넣습니다.)
   (카메라가 1개만 있는 경우에는 0을 넣으면 됩니다.)
	 
 >python ./detect.py --weights ./models/yolov5s.pt --img 640 --conf 0.5 --source 0
  -->카메라 종료는 [Ctrl+C]
 

<동영상 파일을 이용한 객체 탐지 실행 명령>
- 동영상(mp4) 파일로 실행하여 테스트하기
 - --view-img : 동영상을 플레이해서 디텍션 보여주기 옵션
 
 >python detect.py --weights ./models/yolov5s.pt --img 640 --conf 0.5 --source ./data/mp4/test.mp4 --view-img


<<GPU를 사용하는 경우 실행 명령>> -----------------------
 - 이미지, 카메라, 동영상 실행명령의 가장 마지막에 --device 0 추가 
 - GPU가 여러개인 경우에는 해당 사용 GPU 장치의 번호를 넣으면 됩니다.
   -> GPU가 1개인 경우 : --device 0
	 -> GPU가 2개인 경우 2번째 GPU를 사용할 경우 : --device 1
 
 (GPU 사용 - 이미지 처리)
  >python ./detect.py --weights ./models/yolov5s.pt --img 640 --conf 0.5 --source ./data/images/bus.jpg --device 0

 (GPU 사용 - 카메라 처리)
  >python detect.py --weights ./models/yolov5s.pt --img 640 --conf 0.5 --source 0 --device 0

 (GPU 사용 - 동영상 처리)
  >python detect.py --weights ./models/yolov5s.pt --img 640 --conf 0.5 --source ./data/mp4/test.mp4 --view-img --device 0 


############# Yolo 커스텀 이미지로 학습을 위한 이미지 라벨링 방법 ###########
 - 이미지 라벨링 작업은 단순 반복 작업으로, 매우 많은 시간을 필요로 함
 1. Roboflow 사이트 이용 (주로 사용됨)
 2. LabelImg 라이브러리 이용


